# Automatically generated settings for raspis
#
# Generated by configure.py, @DATE_TIME@
#

import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR=os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

#
# Raspis configured values
#
DEBUG = @DEBUG@
TEMPLATE_DEBUG = DEBUG

ADMINS = (
    @ADMINS@
)

TIME_ZONE = '@TZ@'
LANGUAGE_CODE = '@LANG@'
USE_I18N = @USE_I18N@

DATABASES = {
    'default': {
        'ENGINE':   '@DB_ENGINE@',
        'NAME':     @DB_NAME@,
        'USER':     '@DB_USER@',
        'PASSWORD': '@DB_PASSWD@',
        'HOST':     '@DB_HOST@',
        'PORT':     '@DB_PORT@',
    }
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, '@TEMPLATE_DIR@')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'config.context.site_settings',
                'raspis.context.site_settings'
            ],
        },
    },
]

MEDIA_ROOT = os.path.join(BASE_DIR, '@MEDIA_DIR@')
MEDIA_URL =  '@MEDIA_URL@'

STATIC_ROOT = os.path.join(BASE_DIR, '@STATIC_DIR@')
STATIC_URL =  '@STATIC_URL@'

STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'local'), )

SECRET_KEY = '@SECRET_KEY@'

EMAIL_SUBJECT_PREFIX = '@EMAIL_SUBJECT_PREFIX@'

ALLOWED_HOSTS = []

#
# Below this line should not need to be altered.
#

SITE_ID = 1
USE_L10N = True

MANAGERS = ADMINS
TEMPLATE_DEBUG = DEBUG

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = 'raspis.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'raspis.wsgi.application'

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'config',
    'photo',
    'raspis',
    'dashboard'
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

LOGIN_URL = "/login/"
LOGOUT_URL = "/logout/"
LOGIN_REDIRECT_URL = "/dashboard/"
